name: CI/CD for Spring Boot Application

on:
  push:
    branches:
      - main

env:
  APP_NAME: grex-springboot-app
  REGISTRY_URL: ghcr.io
  MAVEN_REPO: grex-organisation/maven-package-registry
  DOCKER_REPO: grex-organisation/docker-container-registry
  DOCKER_IMAGE_SUFFIX: image-docker
  MAVEN_USERNAME: ${{ github.actor }}
  MAVEN_PASSWORD: ${{ secrets.ORG_CICD_TOKEN }}


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Generate timestamp in a step
      - name: Generate build timestamp
        run: |
            TIMESTAMP=$(date +'%d%m%Y%H%M')
            echo "BUILD_TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

      # Checkout the code from GitHub repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Set up JDK 17 (or other versions you are using)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Build the project and package
      - name: Build with Maven
        run: mvn clean package

      # Extract version and artifactId from pom.xml
      - name: Extract version and artifactId
        id: vars
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          timestamp=$(date +%Y%m%d%H%M%S)
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "ARTIFACT_ID=${artifactId}" >> $GITHUB_ENV
          echo "TIMESTAMP=${timestamp}" >> $GITHUB_ENV

      # Publish to GitHub Packages
      - name: Publish WAR to GitHub Packages
        run: |
          mvn deploy
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_CICD_TOKEN }}


      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.ORG_CICD_TOKEN }}

      # Build Docker image
      - name: Build Docker image
        run:  docker build . -t ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:${{ env.BUILD_TIMESTAMP }}

      # Push Docker image to GitHub Container Registry
      - name: Push Docker image
        run:  docker push ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:${{ env.BUILD_TIMESTAMP }}


      # Tag Docker image with `latest` tag
      - name: Tag Docker image as latest
        run: |
          docker tag ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:${{ env.BUILD_TIMESTAMP }}   ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:latest
          docker push ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:latest

      # Prepare SSH key
      - name: Setup SSH key
        run: |
          echo ${{ secrets.ORG_EC2_SSH_TOKEN }} | base64 --decode > /tmp/aws_ec2_key.pem
          chmod 600 /tmp/aws_ec2_key.pem

      # Copy Docker Compose files and deploy on EC2 instances
      - name: Deploy to EC2 Instance 1
        run: |
          ssh -t -o StrictHostKeyChecking=no -i /tmp/aws_ec2_key.pem ec2-user@${{ secrets.EC2_HOST_IP }} << 'EOF'
            echo ${{ secrets.ORG_CICD_TOKEN }} | docker login ${{ env.REGISTRY_URL }} -u ${{ github.actor }} --password-stdin
            docker stop $(docker ps -q)      # Stops all running containers
            docker rm $(docker ps -aq)       # Removes all containers (stopped or running)
            sudo docker rmi - f ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:latest
            sudo docker pull ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:latest
            sudo docker pull redis:latest
            sudo docker run -d --name redis   --network grex-network   -p 6379:6379   --restart always  redis:latest redis-server --maxmemory 20mb --maxmemory-policy allkeys-lru
            sudo docker run -d --name ${{ env.APP_NAME }} -p 8080:8080 ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.APP_NAME }}-${{env.DOCKER_IMAGE_SUFFIX}}:latest
          EOF